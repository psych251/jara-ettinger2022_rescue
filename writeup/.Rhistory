d_Tsimane = read.csv("ShapeBias_Data_original.csv")
d_Tsimane_filtered = d_Tsimane %>% select(c("Experiment", "Example", "Choice","Location"))
d_Tsimane_summarized = d_Tsimane_filtered %>%
group_by(Choice, Location) %>%
summarise( n = n(), Percentage = n / nrow(d_Tsimane_filtered))
df_combined <- rbind(d_filtered_long, d_Tsimane_filtered)
df_combined_summarised <- rbind(d_filtered_long_summarized, d_Tsimane_summarized)
df_combined$Example[df_combined$Example == "Yarn"] <- "Arch" #replace question number with the name of the object that is shown in that question
df_combined$Example[df_combined$Example == "Dax"] <- "Snowman"
df_combined$Example[df_combined$Example == "Fep"] <- "Lamp"
###Data Preparation
#install.packages("lme4",repos="http://r-forge.r-project.org")
#install.packages("statmod")
#install.packages("lme4")
####Load Relevant Libraries and Functions
library(tidyverse)
library(foreign)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(here)
library(lme4)
####Import datare
d = read.csv("data.csv")
head(d)
#### Data exclusion / filtering
d_filtered = d %>% select(c("ResponseId", "Q5", "Q9", "Q12"))
d_filtered_long = d_filtered %>%
pivot_longer(cols = -c("ResponseId") ,names_to = 'Example', values_to = 'Choice')
#### Prepare data for analysis - create columns etc.
d_filtered_long$Example[d_filtered_long$Example == "Q5"] <- "Yarn" #replace question number with the name of the object that is shown in that question
d_filtered_long$Example[d_filtered_long$Example == "Q9"] <- "Dax"
d_filtered_long$Example[d_filtered_long$Example == "Q12"] <- "Fep"
d_filtered_long$Choice[d_filtered_long$Choice == "IM_eY8Vwfih2OynNCm"] <- "Yarn"  #replace the serial number that identifies the answer choice with the name of the object that corresponds to that choice.
d_filtered_long$Choice[d_filtered_long$Choice == "IM_enDeJ2onL1JrLP8"] <- "Fep"
d_filtered_long$Choice[d_filtered_long$Choice == "IM_5A9xQWROP0v4aPA"] <- "Dax"
d_filtered_long = d_filtered_long %>% filter( !grepl("Import|Response",ResponseId)) #filter some unwanted rows out.
#is.na(d_filtered_long$Choice)
d_filtered_long$Choice[d_filtered_long$Choice==""] <- NA #replace empty slots with NA
d_filtered_long = d_filtered_long %>% filter(!is.na(Choice)) # maintain only the questions that have answers, i.e. the question that appeared to each participant in the random trial.
d_filtered_long = d_filtered_long %>%
mutate(Match = ifelse(Example == Choice, "Shape",
ifelse(Example == "Yarn" & Choice == "Fep","Color",
ifelse(Example == "Yarn" & Choice =="Dax", "Material",
ifelse(Example =="Dax" & Choice == "yarn", "Color",
ifelse(Example =="Dax" & Choice == "Fep", "Material",
ifelse(Example == "Fep" & Choice =="Dax", "Color", "Material"
)
)
)
)
)
)
)
d_filtered_long = d_filtered_long %>%
mutate(Location = "US", Experiment= "US_Adults_Objects") %>%
select(c("Experiment", "Example", "Match","Location" ))
colnames(d_filtered_long)[3] = "Choice"
d_filtered_long_summarized = d_filtered_long %>%
group_by(Choice, Location) %>%
summarise( n = n(), Percentage = n / nrow(d_filtered_long))
# length() only gets distinct un-redundant
head(d_filtered_long)
# importing the Tsimane data from original paper
d_Tsimane = read.csv("ShapeBias_Data_original.csv")
d_Tsimane_filtered = d_Tsimane %>% select(c("Experiment", "Example", "Choice","Location"))
d_Tsimane_summarized = d_Tsimane_filtered %>%
group_by(Choice, Location) %>%
summarise( n = n(), Percentage = n / nrow(d_Tsimane_filtered))
df_combined <- rbind(d_filtered_long, d_Tsimane_filtered)
df_combined_summarised <- rbind(d_filtered_long_summarized, d_Tsimane_summarized)
df_combined$Example[df_combined$Example == "Yarn"] <- "Arch" #replace question number with the name of the object that is shown in that question
df_combined$Example[df_combined$Example == "Dax"] <- "Snowman"
df_combined$Example[df_combined$Example == "Fep"] <- "Lamp"
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_x_discrete("Example") +
scale_y_continuous("Frequency of choices out of 144 trials ") +
facet_wrap(~Location) +
labs(title = "Word - Object categorization", subtitle = "Shape bias")
ggplot(df_combined_summarised, aes(x = Location, fill = Choice)) +
geom_bar( aes(y = Percentage), stat = "identity", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969" ))
# Statistical analysis
data_new <- d_filtered_long
data_new$Choice[data_new$Choice == "Shape"] <- 1
data_new$Choice[data_new$Choice == "Material"] <- 0
#using the combined data
m <- glmer(Choice=="Shape" ~  Location  + (1 + Location| Example) ,df_combined,family="binomial")
#m <- glmer(Choice=="Shape" ~  Location  + (1 + Location| Example) + (1 | Experiment),df_combined,family="binomial")
summary(m)
ggsave('figure2.png', dpi=300)
ggsave('figure1.png', dpi=300)
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_x_discrete("Example") +
scale_y_continuous("Frequency of choices out of 144 trials ") +
facet_wrap(~Location) +
labs(title = "Word - Object categorization", subtitle = "Shape bias")
ggsave('figure1.png', dpi=300)
ggplot(df_combined_summarised, aes(x = Location, fill = Choice)) +
geom_bar( aes(y = Percentage), stat = "identity", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969" ))
ggsave('figure2.png', dpi=300)
###Data Preparation
#install.packages("lme4",repos="http://r-forge.r-project.org")
#install.packages("statmod")
#install.packages("lme4")
####Load Relevant Libraries and Functions
library(tidyverse)
library(foreign)
library(tidyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(here)
library(lme4)
####Import datare
d = read.csv("data.csv")
head(d)
#### Data exclusion / filtering
d_filtered = d %>% select(c("ResponseId", "Q5", "Q9", "Q12"))
d_filtered_long = d_filtered %>%
pivot_longer(cols = -c("ResponseId") ,names_to = 'Example', values_to = 'Choice')
#### Prepare data for analysis - create columns etc.
d_filtered_long$Example[d_filtered_long$Example == "Q5"] <- "Yarn" #replace question number with the name of the object that is shown in that question
d_filtered_long$Example[d_filtered_long$Example == "Q9"] <- "Dax"
d_filtered_long$Example[d_filtered_long$Example == "Q12"] <- "Fep"
d_filtered_long$Choice[d_filtered_long$Choice == "IM_eY8Vwfih2OynNCm"] <- "Yarn"  #replace the serial number that identifies the answer choice with the name of the object that corresponds to that choice.
d_filtered_long$Choice[d_filtered_long$Choice == "IM_enDeJ2onL1JrLP8"] <- "Fep"
d_filtered_long$Choice[d_filtered_long$Choice == "IM_5A9xQWROP0v4aPA"] <- "Dax"
d_filtered_long = d_filtered_long %>% filter( !grepl("Import|Response",ResponseId)) #filter some unwanted rows out.
#is.na(d_filtered_long$Choice)
d_filtered_long$Choice[d_filtered_long$Choice==""] <- NA #replace empty slots with NA
d_filtered_long = d_filtered_long %>% filter(!is.na(Choice)) # maintain only the questions that have answers, i.e. the question that appeared to each participant in the random trial.
d_filtered_long = d_filtered_long %>%
mutate(Match = ifelse(Example == Choice, "Shape",
ifelse(Example == "Yarn" & Choice == "Fep","Color",
ifelse(Example == "Yarn" & Choice =="Dax", "Material",
ifelse(Example =="Dax" & Choice == "yarn", "Color",
ifelse(Example =="Dax" & Choice == "Fep", "Material",
ifelse(Example == "Fep" & Choice =="Dax", "Color", "Material"
)
)
)
)
)
)
)
d_filtered_long = d_filtered_long %>%
mutate(Location = "US", Experiment= "US_Adults_Objects") %>%
select(c("Experiment", "Example", "Match","Location" ))
colnames(d_filtered_long)[3] = "Choice"
d_filtered_long_summarized = d_filtered_long %>%
group_by(Choice, Location) %>%
summarise( n = n(), Percentage = n / nrow(d_filtered_long))
# length() only gets distinct un-redundant
head(d_filtered_long)
# importing the Tsimane data from original paper
d_Tsimane = read.csv("ShapeBias_Data_original.csv")
d_Tsimane_filtered = d_Tsimane %>% select(c("Experiment", "Example", "Choice","Location"))
d_Tsimane_summarized = d_Tsimane_filtered %>%
group_by(Choice, Location) %>%
summarise( n = n(), Percentage = n / nrow(d_Tsimane_filtered))
df_combined <- rbind(d_filtered_long, d_Tsimane_filtered)
df_combined_summarised <- rbind(d_filtered_long_summarized, d_Tsimane_summarized)
df_combined$Example[df_combined$Example == "Yarn"] <- "Arch" #replace question number with the name of the object that is shown in that question
df_combined$Example[df_combined$Example == "Dax"] <- "Snowman"
df_combined$Example[df_combined$Example == "Fep"] <- "Lamp"
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_x_discrete("Example") +
scale_y_continuous("Percentage of Responses") +
facet_wrap(~Location) +
#labs(title = "Word - Object categorization", subtitle = "Shape bias")
ggsave('figure1.png', dpi=300)
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_x_discrete("Example") +
scale_y_continuous("Percentage of Responses", labels = scales::percent) +
facet_wrap(~Location)
ggsave('choice_by_property_replication.png', dpi=300)
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_x_discrete("Extension Shape") +
scale_y_continuous("Percentage of Responses", labels = scales::percent) +
facet_wrap(~Location)
ggsave('choice_by_property_replication.png', dpi=300)
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_y_continuous("Percentage of Responses", labels = scales::percent) +
theme_minimal() +
scale_x_discrete('Extension Shape') + #x-label
facet_wrap(~Location) +
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
labs(x = "Shape", y = "Proportion", fill = "Material") +
labs(fill = "Property Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_y_continuous("Percentage of Responses", labels = scales::percent) +
theme_minimal() +
scale_x_discrete('Extension Shape') + #x-label
facet_wrap(~Location) +
labs(x = "Shape", y = "Proportion", fill = "Material") +
labs(fill = "Property Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_y_continuous("Percentage of Responses", labels = scales::percent) +
theme_minimal() +
scale_x_discrete('Extension Shape') + #x-label
facet_wrap(~Location) +
labs(x = "Shape", y = "Proportion", fill = "Material") +
labs(fill = "Property Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
ggsave('choice_by_property_replication.png', dpi=300)
ggplot(df_combined, aes(x=Example, fill = Choice)) +
geom_bar(position="fill", width = .7) +
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969")) +
scale_y_continuous("Percentage of Responses", labels = scales::percent) +
theme_minimal() +
scale_x_discrete('Extension Shape') + #x-label
facet_wrap(~Location) +
labs(fill = "Property Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
ggsave('choice_by_property_replication.png', dpi=300)
ggplot(df_combined_summarised, aes(x = Location, fill = Choice)) +
geom_bar( aes(y = Percentage), stat = "identity", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969" ))
scale_x_discrete('Experiment 5: USA Adults') + #x-label
scale_y_continuous('Percentage of responses', labels = scales::percent) + #y-label
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
labs(fill = "Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
ggplot(df_combined_summarised, aes(x = Location, fill = Choice)) +
geom_bar( aes(y = Percentage), stat = "identity", width = 0.7) +
theme_minimal() +
scale_fill_manual(values = c("#B4DCB9", "#7F92B8", "#6C6969" )) +
scale_x_discrete('Experiment 5: USA Adults') + #x-label
scale_y_continuous('Percentage of responses', labels = scales::percent) + #y-label
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
labs(fill = "Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
ggsave('choice_by_shape_and_property_replication.png', dpi=300)
#library(simr)
#Load relevant libraries and functions.
suppressMessages(library (tidyverse))
suppressMessages(library (dplyr))
library (ggplot2)
#TODO: update this file name.
data_file <- 'PilotB_12-04-2023.csv'
#Read in the CSV file.
data_path <- file.path(getwd(), '..', 'data', data_file)
data <- read.csv(data_path)
#Check that there are enough subjects per condition.
data_checks <- data |>
group_by(run_id) |> #Group all trials (multiple rows per subject).
summarize(numSubjectsPerCondition = n_distinct(condition)) #TODO: Check that this works when there are multiple subjects per condition.
print(paste("There are an equal number of subjects per condition:", length(unique(data_checks$numSubjectsPerCondition)) == 1)) #If true, then there are an equal number of subjects per condition.
#Check that all of the images for each subject loaded successfully.
suppressMessages(library(stringr))
print(paste("Images loaded successfully for all subjects:", sum(str_detect(data$success, 'false')) == 0)) #If true, then all images loaded successfully for all subjects.
#Select only relevant columns and rename them.
data_main_analyses <- data |>
select(c('rt', 'trial_type', 'run_id', 'condition', 'recorded_at', 'device', 'success', 'stimulus', 'response', starts_with('exemplar'), starts_with('extension'))) |>
rename(reactionTime = rt, trialType = trial_type, subjectID = run_id, recordedAt = recorded_at, imageLoadSuccess = success) |> #Rename columns to match naming conventions.
filter(subjectID > 29) |> #Remove subjects before particular dates (i.e., pilot subjects).
filter(device != 'iPhone') |>  #Remove subjects who used phones.
select(c(-'device', -'recordedAt')) #Remove columns that aren't necessary anymore.
#TODO: Remove any subjects that did not have images load successfully.
#Put demographic responses (currently in the 'response' column) into their own columns.
for (row_index in 1:nrow(data_main_analyses)) {
participant_response <- data_main_analyses[row_index, 'response'] #Create a variable for the response in the current row
stimulus <- data_main_analyses[row_index, 'stimulus'] #Create a variable for the stimulus in the current row
#Check that the 'response' is not an empty string.
if(nzchar(participant_response)) {
#Check if it's a survey response (has {} in the string) and update.
if (grepl("{", participant_response, fixed = TRUE)) {
#Attention check: left image.
if (grepl('extensionLeftImg_exemplar_commonalities', participant_response)) {
temp_response <- strsplit(participant_response, ':')[[1]][2] #Get only the answer
temp_response <- gsub('["}]', '', temp_response) #Trim the extra characters
data_main_analyses[row_index, 'extensionLeftImgAttnCheckResponse'] <- temp_response
}
#Attention check: center image.
else if (grepl('extensionCenterImg_exemplar_commonalities', participant_response)) {
temp_response <- strsplit(participant_response, ':')[[1]][2] #Get only the answer
temp_response <- gsub('["}]', '', temp_response) #Trim the extra characters
data_main_analyses[row_index, 'extensionCenterImgAttnCheckResponse'] <- temp_response
}
#Attention check: right image.
else if (grepl('extensionRightImg_exemplar_commonalities', participant_response)) {
temp_response <- strsplit(participant_response, ':')[[1]][2] #Get only the answer
temp_response <- gsub('["}]', '', temp_response) #Trim the extra characters
data_main_analyses[row_index, 'extensionRightImgAttnCheckResponse'] <- temp_response
}
#Participant age.
else if (grepl('Age', participant_response)) {
temp_response <- strsplit(participant_response, ':')[[1]][2] #Get only the answer
temp_response <- gsub('["}]', '', temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantAge'] <- temp_response
}
#Geographical location.
else if (grepl('CurrentUSA', participant_response)) {
temp_response <- strsplit(participant_response, ',') #List of responses for BornUSA, ChildhoodUSA, and CurrentUSA.
#Participant birth location.
if (grepl('BornUSA', temp_response[[1]][1])) {
geog_temp_response <- strsplit(temp_response[[1]][1], ':')[[1]][2] #Get only the answer for BornUSA.
geog_temp_response <- gsub('["}]', '', geog_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantBornUSA'] <- geog_temp_response
}
#Participant childhood location.
if (grepl('ChildhoodUSA', temp_response[[1]][2])) {
geog_temp_response <- strsplit(temp_response[[1]][2], ':')[[1]][2] #Get only the answer for ChildhoodUSA.
geog_temp_response <- gsub('["}]', '', geog_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantChildhoodUSA'] <- geog_temp_response
}
#Participant current location.
if (grepl('CurrentUSA', temp_response[[1]][3])) {
geog_temp_response <- strsplit(temp_response[[1]][3], ':')[[1]][2] #Get only the answer for CurrentUSA.
geog_temp_response <- gsub('["}]', '', geog_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantCurrentUSA'] <- geog_temp_response
}
}
#Zipcodes.
else if (grepl('CurrentZipcode', participant_response)) {
temp_response <- strsplit(participant_response, ',') #List of responses for CurrentZipcode and ChildhoodZipcode.
#Participant current zipcode.
if (grepl('CurrentZipcode', temp_response[[1]][1])) {
zipcode_temp_response <- strsplit(temp_response[[1]][1], ':')[[1]][2] #Get only the answer for CurrentZipcode.
zipcode_temp_response <- gsub('["}]', '', zipcode_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantCurrentZipcode'] <- zipcode_temp_response
}
#Participant childhood zipcode.
if (grepl('ChildhoodZipcode', temp_response[[1]][2])) {
zipcode_temp_response <- strsplit(temp_response[[1]][2], ':')[[1]][2] #Get only the answer for ChildhoodZipcode.
zipcode_temp_response <- gsub('["}]', '', zipcode_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantChildhoodZipcode'] <- zipcode_temp_response
}
}
#Languages.
else if (grepl('FirstLanguage', participant_response)) {
temp_response <- strsplit(participant_response, '",') #List of responses for FirstLanguage and AllLanguages.
#Participant first language.
if (grepl('FirstLanguage', temp_response[[1]][1])) {
language_temp_response <- strsplit(temp_response[[1]][1], ':')[[1]][2] #Get only the answer for FirstLanguage.
language_temp_response <- gsub('["}]', '', language_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantFirstLanguage'] <- language_temp_response
}
#Participant all languages spoken.
if (grepl('AllLanguages', temp_response[[1]][2])) {
language_temp_response <- strsplit(temp_response[[1]][2], ':')[[1]][2] #Get only the answer for AllLanguages.
language_temp_response <- gsub('["}]', '', language_temp_response) #Trim the extra characters
data_main_analyses[row_index, 'participantCurrentLanguages'] <- language_temp_response
}
}
}
#Check if it's a numerical response for participant's current location urbanicity rating (1-100).
else if(grepl("^[0-9]+$", participant_response) & (grepl('currently live', stimulus, fixed = TRUE))) {
data_main_analyses[row_index, 'participantCurrentUrbanicity'] <- participant_response
}
#Check if it's a numerical response for participant's childhood location urbanicity rating (1-100).
else if(grepl("^[0-9]+$", participant_response) & (grepl('grew up', stimulus, fixed = TRUE))) {
#Participant's childhood location urbanicity.
data_main_analyses[row_index, 'participantChildhoodUrbanicity'] <- participant_response
}
#Check if it's an image response (choosing the shape image).
else if(grepl("^[0-9]+$", participant_response) & (grepl('img', stimulus, fixed = TRUE))) {
data_main_analyses[row_index, 'participantExtensionChoice'] <- participant_response
}
}
#Interpret the participantExtensionChoice column to make the numerical answer choice values meaningful.
participant_image_choice <- data_main_analyses[row_index, 'participantExtensionChoice']
if (!is.na(participant_image_choice) && length(participant_image_choice) > 0) {
#Participant chose the left image.
if(participant_image_choice == "0") {
data_main_analyses[row_index, 'participantExtensionChoiceImage'] <- data_main_analyses[row_index, 'extensionLeftImg']
}
#Participant chose the center image.
else if(participant_image_choice == "1") {
data_main_analyses[row_index, 'participantExtensionChoiceImage'] <- data_main_analyses[row_index, 'extensionCenterImg']
}
#Participant chose the right image.
else if(participant_image_choice == "2") {
data_main_analyses[row_index, 'participantExtensionChoiceImage'] <- data_main_analyses[row_index, 'extensionRightImg']
}
}
}
#Combine subject rows into a single row and remove the extra columns.
data_main_analyses_tidy <- data_main_analyses |>
select(-reactionTime, -trialType, -imageLoadSuccess, -stimulus, -response) |>
mutate(across(everything(), ~ ifelse(. == "", NA, .))) |>  #Replace empty strings with NA
group_by(subjectID) |>
summarise(across(everything(), ~ if (all(is.na(.))) {NA} else {na.omit(.)[1]}), .groups = "drop")
#Go through each subject.
for (row_index in 1:nrow(data_main_analyses_tidy)) {
#Get the exemplar the participant saw.
participant_exemplar <- unlist(strsplit(as.character(data_main_analyses_tidy[row_index, 'exemplarImg']), '_'))
#Get the extension the participant chose.
participant_extension_choice <- unlist(strsplit(as.character(data_main_analyses_tidy[row_index, 'participantExtensionChoiceImage']), '_'))
#Get the shape of the exemplar object and put into a new column called exemplarShape.
exemplar_shape <- participant_exemplar[3]
data_main_analyses_tidy[row_index, 'exemplarShape'] <- exemplar_shape
#Get the overlapping property.
overlap <- intersect(participant_exemplar, participant_extension_choice)
#Put the overlapping property into a new column.
data_main_analyses_tidy[row_index, 'participantOverlapAnswer'] <- overlap
#Interpret the overlapping answer
if(overlap == 'red' | overlap == 'blue' | overlap == 'yellow') {
data_main_analyses_tidy[row_index, 'participantOverlapProperty'] <- 'color'
}
else if(overlap == 'crepe' | overlap == 'foam' | overlap == 'yarn') {
data_main_analyses_tidy[row_index, 'participantOverlapProperty'] <- 'material'
}
else if(overlap == 'arch' | overlap == 'lamp' | overlap == 'snowman') {
data_main_analyses_tidy[row_index, 'participantOverlapProperty'] <- 'shape'
}
}
data_main_analyses_tidy <- data_main_analyses_tidy |>
mutate(participantLocation = 'USA', experiment= 'USA_Adults') |>
select(subjectID, condition, experiment, participantLocation, exemplarName, exemplarImg, exemplarShape, participantOverlapAnswer, participantOverlapProperty, participantExtensionChoice, participantExtensionChoiceImage, extensionLeftImg, extensionCenterImg, extensionRightImg, extensionLeftImgAttnCheckResponse, extensionCenterImgAttnCheckResponse, extensionRightImgAttnCheckResponse, participantAge, participantBornUSA, participantChildhoodUSA, participantCurrentUSA, participantCurrentZipcode, participantChildhoodZipcode, participantFirstLanguage, participantCurrentLanguages, participantCurrentUrbanicity, participantChildhoodUrbanicity)
#Calculate the percentages of each choice and output into a dataframe.
statistics_by_property = data_main_analyses_tidy |>
group_by(participantOverlapProperty, participantLocation) |>
summarize(n = n(), proportion = n / nrow(data_main_analyses_tidy), .groups = 'drop') |>
#TODO: this part is incorrect, trying to calculate statistics for 95% confidence intervals.
mutate(
lower = proportion - qnorm(0.975) * sqrt(proportion * (1 - proportion) / sum(n)),
upper = proportion + qnorm(0.975) * sqrt(proportion * (1 - proportion) / sum(n))
) |>
ungroup()
#Plot the data for the first figure and save as a file.
ggplot(statistics_by_property, aes(y = proportion, x = participantLocation, fill = participantOverlapProperty)) +
geom_bar(position = "stack", stat = 'identity', width = .7) +
#geom_errorbar(aes(ymin = lower, ymax = upper), position = position_stack(vjust = 0.5), width = .2) + #95% confidence interval
theme_minimal() +
scale_fill_manual(values = c("#7F92B8", "#6C6969", "#B4DCB9")) + #set the bar colors
scale_x_discrete('Experiment 5: USA Adults') + #x-label
scale_y_continuous('Percentage of responses', labels = scales::percent) + #y-label
facet_wrap(~participantLocation) + #group responses by population
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
labs(fill = "Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
img_path <- file.path(getwd(), '..', 'figures', 'choice_by_property_rescue.png')
ggsave(img_path, device = 'png', dpi=300)
#Calculate the percentages of each choice by property and output into a dataframe.
count_df <- data_main_analyses_tidy |>
group_by(exemplarShape, participantOverlapProperty, experiment) |>
summarize(count = n(), .groups = 'drop') |>
ungroup()
#Pivot the dataframe.
statistics_by_shape_property <- pivot_wider(count_df, id_cols = exemplarShape, names_from = participantOverlapProperty, values_from = count)
statistics_by_shape_property[is.na(statistics_by_shape_property)] <- 0 #Make NULL values 0
#Calculate the proportion of responses for each property.
statistics_by_shape_property$totalCount <- rowSums(statistics_by_shape_property[, -1]) #Calculate the total responses per property
columns_to_calculate <- c("shape", "material", "color")  #All possible properties
existing_columns <- intersect(columns_to_calculate, names(statistics_by_shape_property)) #Find columns that actually exist
statistics_by_shape_property <- statistics_by_shape_property |>
mutate(across(all_of(existing_columns), ~ .x / totalCount, .names = "{.col}Proportion")) #Takes into account if properties don't exist.
#Pivot the data.
statistics_by_shape_property_long <- statistics_by_shape_property |>
pivot_longer(
cols = any_of(c("shapeProportion", "materialProportion", "colorProportion")),
names_to = "exemplarProperty",
values_to = "proportion"
)
#Clean up the property value names.
statistics_by_shape_property_long$exemplarProperty <- sub("Proportion", "", statistics_by_shape_property_long$exemplarProperty)
#Plot the data for the second figure and save as a file.
ggplot(statistics_by_shape_property_long, aes(x = exemplarShape, y = proportion, fill = exemplarProperty)) +
geom_bar(stat = "identity") + #use the actual proportions
theme_minimal() +
scale_fill_manual(values = c("#7F92B8", "#6C6969", "#B4DCB9")) + #set the bar colors
scale_x_discrete('Extension Shape') + #x-label
scale_y_continuous(labels = scales::percent) + # Convert y-axis labels to percent
#facet_wrap(~participantLocation) + #group responses by population
geom_hline(yintercept = (1/3), linetype = 'dotted', color = 'black') + #add dotted chance line
labs(x = "Shape", y = "Percentage of Responses", fill = "Material") +
labs(fill = "Property Choice") +
theme(legend.title = element_text(size = 12, face = "bold"))
img_path <- file.path(getwd(), '..', 'figures', 'choice_by_shape_and_property_rescue.png')
ggsave(img_path, device = 'png', dpi=300)
#TODO: Fix model.
#library (lmerTest)
#library (lme4)
#model <- glmer(participantExtensionChoice == "Shape" ~ participantLocation + (1 + participantLocation | exemplarName) + (1 | experiment), data_main_analyses_tidy, family = 'binomial')
#summary(model)
